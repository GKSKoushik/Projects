import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import train_test_split

df=pd.read_csv(r'C:\Users\Koushik\Desktop\Mini_Proj\archive\a.csv')
x = df['V_in']
y = df.drop['Vibration_1']
X1, X2, y1, y2 = train_test_split(x, y, test_size=0.0005)
test= pd.concat([X2,y2], axis=1)
test

plt.scatter(X2, y2, marker='o', linestyle='-')
plt.xlabel('voltage')
plt.ylabel('vibration')
plt.grid(True)
plt.show()

from sklearn.ensemble import IsolationForest
clf = IsolationForest(random_state=100)
clf.fit(test)

# Predict outliers
outliers_pred = clf.predict(test)

# The outliers are labeled as -1, inliers are labeled as 1
outliers_indices = np.where(outliers_pred == -1)[0]

print("Indices of outliers:", outliers_indices)

plt.figure(figsize=(10, 6))
plt.scatter(test['V_in'], test['Vibration_1'], c=outliers_pred, cmap='viridis', s=1)
plt.colorbar(label='LOF Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('LOF Density Plot')
df= pd.DataFrame()
df['v']=X2
df['vibration1']=y2

model = LocalOutlierFactor(n_neighbors=40, contamination=0.0184)

outlier_scores = model.fit_predict(df)
negative_outlier_scores = model.negative_outlier_factor_
print(outlier_scores)
df['anomoly']=outlier_scores
df['outlier_scores']=negative_outlier_scores
df

plt.figure(figsize=(10, 6))
plt.scatter(df['v'], df['vibration1'], c=df['anomoly'], cmap='viridis', s=1)
plt.colorbar(label='LOF Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('LOF Density Plot')


plt.show()
from scipy.stats import entropy
import numpy as np

x = df['vibration1']

num_segments = len(x) // 100
segments = np.array_split(x, num_segments)


Div_k = [abs(1 - entropy(segment.value_counts(normalize=True))) for segment in segments]
Div_k
print(len(Div_k))

wei=[(100*Div_k[i]/np.sum(Div_k[0:len(Div_k)]))+0*y  for i, segment in enumerate(segments) for y in segment]
print("Weighted Matrix:")
print(wei)
print(len(wei))
df['weight']=wei
df
n_anomoly=df[df['anomoly']==1]
n_anomoly

s_anomoly=df[df['anomoly']==-1]


plt.figure(figsize=(10, 6))
plt.scatter(n_anomoly['v'], n_anomoly['vibration1'], c=n_anomoly['weight'], cmap='viridis', s=1)
plt.colorbar(label='LOF Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('LOF Density Plot')

plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(s_anomoly['v'], s_anomoly['vibration1'], c=s_anomoly['weight'], cmap='viridis', s=1)
plt.colorbar(label='LOF Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('LOF Density Plot')


plt.show()
df
updated_anomoly=[ outlier_scores[i]*-1 if w < .748 else outlier_scores[i]  for i, w in enumerate(df['weight'])]
len(updated_anomoly)

plt.figure(figsize=(10, 6))
plt.scatter(df['v'], df['vibration1'], c=updated_anomoly, cmap='viridis', s=1)
plt.colorbar(label='LOF Score')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('LOF Density Plot')


plt.show()